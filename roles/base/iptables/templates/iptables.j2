*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]

# ------------------- Anti-DDoS rules ------------------- #

-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m connlimit --connlimit-above 80 -j REJECT --reject-with tcp-reset -m comment --comment "Limit connections per source IP from hosts that have more than 80 established connections"

-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT -m comment --comment "Limit incoming TCP RST packets"
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags RST RST                                      -j DROP   -m comment --comment "Limit incoming TCP RST packets"

-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT -m comment --comment "Limit new TCP connections that client can establish per second per source IP"
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate NEW                                        -j DROP   -m comment --comment "Limit new TCP connections that client can establish per second per source IP"

-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --dport {{ vault_ssh_port }} -m conntrack --ctstate NEW -m recent --set                                       -m comment --comment "SSH brute-force protection"
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --dport {{ vault_ssh_port }} -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 10 -j DROP -m comment --comment "SSH brute-force protection"

-N port-scanning                                                                                                                                           -m comment --comment "Protection against port scanning"
-A port-scanning -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN -m comment --comment "Protection against port scanning"
-A port-scanning -i {{ ansible_facts['default_ipv4']['interface'] }}                                                                             -j DROP   -m comment --comment "Protection against port scanning"

# ------------------- Basic rules ------------------- #

-A OUTPUT -o lo                  -j ACCEPT -m comment --comment "Only accept looback traffic originating from localhost"
-A INPUT  -i lo                  -j ACCEPT -m comment --comment "Only accept looback traffic originating from localhost"
-A INPUT  ! -i lo -s 127.0.0.0/8 -j REJECT -m comment --comment "Only accept looback traffic originating from localhost"

-A INPUT  -p tcp -i {{ ansible_facts['default_ipv4']['interface'] }} --dport {{ vault_ssh_port }} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow incoming SSH on custom port"
-A OUTPUT -p tcp -o {{ ansible_facts['default_ipv4']['interface'] }} --sport {{ vault_ssh_port }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow incoming SSH on custom port"

-A OUTPUT -p icmp -o {{ ansible_facts['default_ipv4']['interface'] }} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate ICMP requests"
-A INPUT  -p icmp -i {{ ansible_facts['default_ipv4']['interface'] }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow server to initiate ICMP requests"

-A OUTPUT -p tcp -o {{ ansible_facts['default_ipv4']['interface'] }} --dport 53  -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate DNS requests"
-A INPUT  -p tcp -i {{ ansible_facts['default_ipv4']['interface'] }} --sport 53  -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow server to initiate DNS requests"
-A OUTPUT -p udp -o {{ ansible_facts['default_ipv4']['interface'] }} --dport 53  -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate DNS requests"
-A INPUT  -p udp -i {{ ansible_facts['default_ipv4']['interface'] }} --sport 53  -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow server to initiate DNS requests"

-A OUTPUT -p udp -o {{ ansible_facts['default_ipv4']['interface'] }} --dport 123 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate NTP requests"
-A INPUT  -p udp -i {{ ansible_facts['default_ipv4']['interface'] }} --sport 123 -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow server to initiate NTP requests"

# to be able server to update itself
-A OUTPUT -p tcp -o {{ ansible_facts['default_ipv4']['interface'] }} --dport 80  -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate HTTP/S requests"
-A INPUT  -p tcp -i {{ ansible_facts['default_ipv4']['interface'] }} --sport 80  -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow server to initiate HTTP/S requests"
-A OUTPUT -p tcp -o {{ ansible_facts['default_ipv4']['interface'] }} --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate HTTP/S requests"
-A INPUT  -p tcp -i {{ ansible_facts['default_ipv4']['interface'] }} --sport 443 -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow server to initiate HTTP/S requests"

{% if ansible_facts['system_vendor'] == "Hetzner" %}
# ------------------- Hetzner specific rules ------------------- #

# private IP 172.31.1.1 is a default gateway of Hetzner server's public network interface
-A INPUT  -p udp -s 172.31.1.1 --sport 67 -d {{ ansible_facts['default_ipv4']['address'] }} --dport 68 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "dhclient"
-A OUTPUT -p udp -s {{ ansible_facts['default_ipv4']['address'] }} --sport 68 -d 172.31.1.1 --dport 67 -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "dhclient"

# IP 169.254.169.254 is used by server to discover metadata about itself (https://docs.hetzner.cloud/ -> Server Metadata)
-A OUTPUT -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d 169.254.169.254 --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow kubelet to discover server metadata"
-A INPUT  -p tcp -s 169.254.169.254 --sport 80 -d {{ ansible_facts['default_ipv4']['address'] }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow kubelet to discover server metadata"

{% endif %}
# ------------------- OpenVPN rules ------------------- #

# allow udp clients go to internet through openvpn server

-A INPUT  -p udp -i {{ ansible_facts['default_ipv4']['interface'] }} --dport 1194 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow clients to connect to OpenVPN server by UDP"
-A OUTPUT -p udp -o {{ ansible_facts['default_ipv4']['interface'] }} --sport 1194 -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow clients to connect to OpenVPN server by UDP"

-A FORWARD -i {{ tun_interface_client }} -o {{ ansible_facts['default_ipv4']['interface'] }} -s {{ network_client }}/24 -m conntrack --ctstate NEW                 -j ACCEPT -m comment --comment "Allow forward traffic from OpenVPN clients to Internet"
-A FORWARD -i {{ tun_interface_client }} -o {{ ansible_facts['default_ipv4']['interface'] }} -s {{ network_client }}/24 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT -m comment --comment "Allow forward between OpenVPN client's tun interface and server's physical interface"
-A FORWARD -i {{ ansible_facts['default_ipv4']['interface'] }} -o {{ tun_interface_client }}                            -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT -m comment --comment "Allow forward between OpenVPN client's tun interface and server's physical interface"

# ------------------- Basic rules ------------------- #

# Log Blocked Traffic
-A INPUT   -m limit --limit 3/min -j LOG --log-prefix "iptables_INPUT_denied: "   --log-level 4
-A FORWARD -m limit --limit 3/min -j LOG --log-prefix "iptables_FORWARD_denied: " --log-level 4
-A OUTPUT  -m limit --limit 3/min -j LOG --log-prefix "iptables_OUTPUT_denied: "  --log-level 4

COMMIT

*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]

# ------------------- Anti-DDoS rules ------------------- #

-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -m conntrack --ctstate INVALID -j DROP -m comment --comment "Drop invalid packets"

-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp ! --syn -m conntrack --ctstate NEW -j DROP -m comment --comment "Drop TCP packets that are new and are not SYN"

-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP -m comment --comment "Drop SYN packets with suspicious MSS value"

-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags FIN,SYN FIN,SYN              -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags SYN,RST SYN,RST              -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags FIN,RST FIN,RST              -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags FIN,ACK FIN                  -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ACK,URG URG                  -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ACK,FIN FIN                  -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ACK,PSH PSH                  -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ALL ALL                      -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ALL NONE                     -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ALL FIN,PSH,URG              -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ALL SYN,FIN,PSH,URG          -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG      -j DROP -m comment --comment "Block packets with bogus TCP flags"

-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 224.0.0.0/3     -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
{% if ansible_facts['system_vendor'] == "Hetzner" %}
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 169.254.169.254 -j ACCEPT -m comment --comment "Allow packets from Hetzner Cloud API"
{% endif %}
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 169.254.0.0/16  -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
{% if ansible_facts['system_vendor'] == "Hetzner" %}
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 172.31.1.1      -j ACCEPT -m comment --comment "Allow packets from default gateway of Hetzner server's public network interface"
{% endif %}
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 172.16.0.0/12   -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 192.0.2.0/24    -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 192.168.0.0/16  -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 10.0.0.0/8      -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 240.0.0.0/5     -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
-A PREROUTING -s 127.0.0.0/8 ! -i lo                                                 -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"

-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -f -j DROP -m comment --comment "Drop fragmented packets in all chains"

COMMIT

*nat
:PREROUTING ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

# ------------------- OpenVPN rules ------------------- #

-A POSTROUTING -o {{ ansible_facts['default_ipv4']['interface'] }} -s {{ network_client }}/24 -j SNAT --to-source {{ ansible_facts['default_ipv4']['address'] }} -m comment --comment "Masquerade all packets as traffic from server's physical interface"

COMMIT
